apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "helm-chart.fullname" . }}-config
data:
  murmur.ini: |
    # Murmur configuration file.
    #
    # General notes:
    # * Settings in this file are default settings and many of them can be overridden
    #   with virtual server specific configuration via the Ice or DBus interface.
    # * Due to the way this configuration file is read some rules have to be
    #   followed when specifying variable values (as in variable = value):
    #     * Make sure to quote the value when using commas in strings or passwords.
    #        NOT variable = super,secret BUT variable = "super,secret"
    #     * Make sure to escape special characters like '\' or '"' correctly
    #        NOT variable = """ BUT variable = "\""
    #        NOT regex = \w* BUT regex = \\w*

    # database name
    database=murmur

    # If you wish to use something other than SQLite, you'll need to set the name
    # of the database above, and also uncomment the below.
    # Sticking with SQLite is strongly recommended, as it's the most well tested
    # and by far the fastest solution.
    #
    dbDriver=QMYSQL
    dbUsername=$DB_USER
    dbPassword="$DB_PASSWORD"
    dbHost={{ include "helm-chart.fullname" . }}-mysql
    dbPort=3306
    dbPrefix=murmur_

    # Murmur defaults to not using D-Bus. If you wish to use dbus, which is one of the
    # RPC methods available in Murmur, please specify so here.
    #
    dbus=system

    # Alternate D-Bus service name. Only use if you are running distinct
    # murmurd processes connected to the same D-Bus daemon.
    #dbusservice=net.sourceforge.mumble.murmur

    # If you want to use ZeroC Ice to communicate with Murmur, you need
    # to specify the endpoint to use. Since there is no authentication
    # with ICE, you should only use it if you trust all the users who have
    # shell access to your machine.
    # Please see the ICE documentation on how to specify endpoints.
    ice="tcp -h 127.0.0.1 -p 6502"

    # Ice primarily uses local sockets. This means anyone who has a
    # user account on your machine can connect to the Ice services.
    # You can set a plaintext "secret" on the Ice connection, and
    # any script attempting to access must then have this secret
    # (as context with name "secret").
    # Access is split in read (look only) and write (modify) 
    # operations. Write access always includes read access,
    # unless read is explicitly denied (see note below).
    #
    # Note that if this is uncommented and with empty content,
    # access will be denied.

    #icesecretread=
    icesecretwrite=

    # How many login attempts do we tolerate from one IP
    # inside a given timeframe before we ban the connection?
    # Note that this is global (shared between all virtual servers), and that
    # it counts both successfull and unsuccessfull connection attempts.
    # Set either Attempts or Timeframe to 0 to disable.
    #autobanAttempts = 10
    #autobanTimeframe = 120
    #autobanTime = 300

    # Specifies the file Murmur should log to. By default, Murmur
    # logs to the file 'murmur.log'. If you leave this field blank
    # on Unix-like systems, Murmur will force itself into foreground
    # mode which logs to the console.
    logfile=

    # If set, Murmur will write its process ID to this file
    # when running in daemon mode (when the -fg flag is not
    # specified on the command line). Only available on
    # Unix-like systems.
    pidfile=/var/run/mumble-server/mumble-server.pid

    # The below will be used as defaults for new configured servers.
    # If you're just running one server (the default), it's easier to
    # configure it here than through D-Bus or Ice.
    #
    # Welcome message sent to clients when they connect.
    welcometext="<br />Welcome to this server running <b>Murmur</b>.<br />Plebs not welcome!<br />"

    # Port to bind TCP and UDP sockets to.
    port=64738

    # Specific IP or hostname to bind to.
    # If this is left blank (default), Murmur will bind to all available addresses.
    #host=

    # Password to join server.
    serverpassword=

    # Maximum bandwidth (in bits per second) clients are allowed
    # to send speech at.
    bandwidth=72000

    # Maximum number of concurrent clients allowed.
    users=100

    # Amount of users with Opus support needed to force Opus usage, in percent.
    # 0 = Always enable Opus, 100 = enable Opus if it's supported by all clients.
    #opusthreshold=100

    # Maximum depth of channel nesting. Note that some databases like MySQL using
    # InnoDB will fail when operating on deeply nested channels.
    #channelnestinglimit=10

    # Regular expression used to validate channel names.
    # (Note that you have to escape backslashes with \ )
    #channelname=[ \\-=\\w\\#\\[\\]\\{\\}\\(\\)\\@\\|]+

    # Regular expression used to validate user names.
    # (Note that you have to escape backslashes with \ )
    #username=[-=\\w\\[\\]\\{\\}\\(\\)\\@\\|\\.]+

    # Maximum length of text messages in characters. 0 for no limit.
    #textmessagelength=5000

    # Maximum length of text messages in characters, with image data. 0 for no limit.
    #imagemessagelength=131072

    # Allow clients to use HTML in messages, user comments and channel descriptions?
    #allowhtml=true

    # Murmur retains the per-server log entries in an internal database which
    # allows it to be accessed over D-Bus/ICE.
    # How many days should such entries be kept?
    # Set to 0 to keep forever, or -1 to disable logging to the DB.
    #logdays=31

    # To enable public server registration, the serverpassword must be blank, and
    # this must all be filled out.
    # The password here is used to create a registry for the server name; subsequent
    # updates will need the same password. Don't lose your password.
    # The URL is your own website, and only set the registerHostname for static IP
    # addresses.
    # Only uncomment the 'registerName' parameter if you wish to give your "Root" channel a custom name.
    #
    registerName=Hansestadt
    #registerPassword=secret
    #registerUrl=https://www.mumble.info/
    #registerHostname=

    # If this option is enabled, the server will announce its presence via the 
    # bonjour service discovery protocol. To change the name announced by bonjour
    # adjust the registerName variable.
    # See http://developer.apple.com/networking/bonjour/index.html for more information
    # about bonjour.
    #bonjour=True

    # If you have a proper SSL certificate, you can provide the filenames here.
    # Otherwise, Murmur will create it's own certificate automatically.
    #sslCert=
    #sslKey=

    # The sslCiphers option chooses the cipher suites to make available for use
    # in SSL/TLS. This option is server-wide, and cannot be set on a
    # per-virtual-server basis.
    #
    # This option is specified using OpenSSL cipher list notation (see
    # https://www.openssl.org/docs/apps/ciphers.html#CIPHER-LIST-FORMAT).
    #
    # It is recommended that you try your cipher string using 'openssl ciphers <string>'
    # before setting it here, to get a feel for which cipher suites you will get.
    #
    # After setting this option, it is recommend that you inspect your Murmur log
    # to ensure that Murmur is using the cipher suites that you expected it to.
    #
    # Note: Changing this option may impact the backwards compatibility of your
    # Murmur server, and can remove the ability for older Mumble clients to be able
    # to connect to it.
    #sslCiphers=EECDH+AESGCM:AES256-SHA:AES128-SHA

    # If Murmur is started as root, which user should it switch to?
    # This option is ignored if Murmur isn't started with root privileges.
    uname=mumble-server

    # If this options is enabled, only clients which have a certificate are allowed
    # to connect.
    #certrequired=False

    # If enabled, clients are sent information about the servers version and operating
    # system.
    #sendversion=True

    # You can configure any of the configuration options for Ice here. We recommend
    # leave the defaults as they are.
    # Please note that this section has to be last in the configuration file.
    #
    [Ice]
    Ice.Warn.UnknownProperties=1
    Ice.MessageSizeMax=65536
  docker-entrypoint.sh: |
    #!/usr/bin/env bash

    # Init script for Murmur server Docker container
    # License: Apache-2.0
    # Github: https://github.com/goofball222/murmur.git
    SCRIPT_VERSION="1.0.1"
    # Last updated date: 2018-08-24

    set -Eeuo pipefail

    if [ "${DEBUG}" == 'true' ];
        then
            set -x
    fi

    log() {
        echo "$(date -u +%FT$(nmeter -d0 '%3t' | head -n1)) <docker-entrypoint> $*"
    }

    log "INFO - Script version ${SCRIPT_VERSION}"

    BASEDIR="/opt/murmur"
    CERTDIR=${BASEDIR}/cert
    CONFIGDIR=${BASEDIR}/config
    DATADIR=${BASEDIR}/data
    LOGDIR=${BASEDIR}/log

    MURMUR=${BASEDIR}/murmur.x86

    MURMUR_OPTS="${MURMUR_OPTS}"

    cd ${BASEDIR}

    do_chown() {
        if [ "${RUN_CHOWN}" == 'false' ]; then
            if [ ! "$(stat -c %u ${BASEDIR})" = "${PUID}" ] || [ ! "$(stat -c %u ${CONFIGDIR})" = "${PUID}" ] \
            || [ ! "$(stat -c %u ${LOGDIR})" = "${PUID}" ]; then
                log "WARN - Configured PUID doesn't match owner of a required directory. Ignoring RUN_CHOWN=false"
                log "INFO - Ensuring permissions are correct before continuing - 'chown -R murmur:murmur ${BASEDIR}'"
                log "INFO - Running recursive 'chown' on Docker overlay2 storage is **really** slow. This may take a bit."
                chown -R murmur:murmur ${BASEDIR}
            else
                log "INFO - RUN_CHOWN set to 'false' - Not running 'chown -R murmur:murmur ${BASEDIR}', assume permissions are right."
            fi
        else
            log "INFO - Ensuring permissions are correct before continuing - 'chown -R murmur:murmur ${BASEDIR}'"
            log "INFO - Running recursive 'chown' on Docker overlay2 storage is **really** slow. This may take a bit."
            chown -R murmur:murmur ${BASEDIR}
        fi
    }


    murmur_setup() {
        log "INFO - Insuring murmur.ini setup for container"
        if [ ! -e ${CONFIGDIR}/murmur.ini ]; then
            log "WARN - '${CONFIGDIR}/murmur.ini' doesn't exist, copying from '${BASEDIR}/murmur.ini-default'"
            cp -p ${BASEDIR}/murmur.ini-default ${CONFIGDIR}/murmur.ini
        fi

        sed -i '/logfile=murmur.log/c\logfile='"${LOGDIR}"'/murmur.log' ${CONFIGDIR}/murmur.ini

        if [ -e ${CERTDIR}/privkey.pem ] && [ -e ${CERTDIR}/fullchain.pem ]; then
            sed -i '/sslCert=/c\sslCert='"${CERTDIR}"'/fullchain.pem' ${CONFIGDIR}/murmur.ini
            sed -i '/sslKey=/c\sslKey='"${CERTDIR}"'/privkey.pem' ${CONFIGDIR}/murmur.ini
        else
            [ -f ${CERTDIR}/privkey.pem ] || log "WARN - SSL: missing '${CERTDIR}/privkey.pem', murmur will use self-signed SSL certificate"
            [ -f ${CERTDIR}/fullchain.pem ] || log "WARN - SSL: missing '${CERTDIR}/fullchain.pem', murmur will use self-signed SSL certificate"
        fi

        sed -i '/uname=/c\uname=murmur' ${CONFIGDIR}/murmur.ini

        MURMUR_OPTS="${MURMUR_OPTS} -fg -v -ini ${CONFIGDIR}/murmur.ini"
    }

    exit_handler() {
        log "INFO - Exit signal received, commencing shutdown"
        pkill -15 -f ${MURMUR}
        for i in `seq 0 9`;
            do
                [ -z "$(pgrep -f ${MURMUR})" ] && break
                # kill it with fire if it hasn't stopped itself after 9 seconds
                [ $i -gt 8 ] && pkill -9 -f ${MURMUR} || true
                sleep 1
        done
        log "INFO - Shutdown complete. Nothing more to see here. Have a nice day!"
        log "INFO - Exit with status code ${?}"
        exit ${?};
    }

    # Wait indefinitely on tail until killed
    idle_handler() {
        while true
        do
            tail -f /dev/null & wait ${!}
        done
    }

    trap 'kill ${!}; exit_handler' SIGHUP SIGINT SIGQUIT SIGTERM

    if [ "$(id -u)" = '0' ];
        then
            log "INFO - Entrypoint running with UID 0 (root)"
            if [ "$(id murmur -g)" != "${PGID}" ] || [ "$(id murmur -u)" != "${PUID}" ];
                then
                    log "INFO - Setting custom murmur GID/UID: GID=${PGID}, UID=${PUID}"
                    groupmod -o -g ${PGID} murmur
                    usermod -o -u ${PUID} murmur
                else
                    log "INFO - GID/UID for murmur are unchanged: GID=${PGID}, UID=${PUID}"
            fi

            if [[ "${@}" == 'murmur' ]];
                then
                    murmur_setup
                    do_chown
                    log "EXEC - ${MURMUR} ${MURMUR_OPTS}"
                    exec 0<&-
                    exec ${MURMUR} ${MURMUR_OPTS} &
                    idle_handler
                else
                    log "EXEC - ${@} as UID 0 (root)"
                    exec "${@}"
            fi
        else
            log "WARN - Container/entrypoint not started as UID 0 (root)"
            log "WARN - Unable to change permissions or set custom GID/UID if configured"
            log "WARN - Process will be spawned with GID=$(id -g), UID=$(id -u)"
            log "WARN - Depending on permissions requested command may not work"
            if [[ "${@}" == 'murmur' ]];
                then
                    murmur_setup
                    exec 0<&-
                    log "EXEC - ${MURMUR} ${MURMUR_OPTS}"
                    exec ${MURMUR} ${MURMUR_OPTS} &
                    idle_handler
                else
                    log "EXEC - ${@}"
                    exec "${@}"
            fi
    fi

    # Script should never make it here, but just in case exit with a generic error code if it does
    exit 1;
